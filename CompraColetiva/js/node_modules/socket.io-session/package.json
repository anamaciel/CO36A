{
  "name": "socket.io-session",
  "version": "0.0.5",
  "description": "Unobtrusive Socket.io middleware to add support for Express 3 sessions.",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/tcr/socket.io-session"
  },
  "keywords": [
    "session",
    "socket.io",
    "express",
    "memory",
    "store",
    "express3",
    "middleware"
  ],
  "author": {
    "name": "Tim Cameron Ryan"
  },
  "license": "MIT",
  "readme": "# socket.io-session\n\nUnobtrusive Socket.io middleware to add Express 3 session capability.\n\n    npm install socket.io-session\n\nThis module uses `io.set('authorization')` to add a `session` property to `socket.handshake`.\n\n```\nvar express = require('express')\n  , MongoStore = require('connect-mongo')(express)\n  , ioSession = require('socket.io-session');\n\nvar app = express();\n\nvar sessionKey = 'secret key'\nvar memoryStore = new MongoStore({ db: 'name', url: MONGO_URI + '/name' });\napp.use(express.cookieParser());\napp.use(express.session({ secret: sessionKey, store: memoryStore }));\n\nvar io = require('socket.io').listen(server);\nio.set('authorization', ioSession(express.cookieParser(sessionKey), memoryStore));\n\nio.on('connection', function (socket) {\n  console.log(socket.handshake.session);\n})\n```\n\n## Invocation\n\nYou can use your own authorization function as the last argument after the session is added:\n\n    ioSession(cookieParser, memoryStore, [session sid key], [authorization(data, accept)])\n\n## License \n\nmiT",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/tcr/socket.io-session/issues"
  },
  "_id": "socket.io-session@0.0.5",
  "dist": {
    "shasum": "11ccc6806e432d60f122f41f514b90bf114bac8e"
  },
  "_from": "socket.io-session@",
  "_resolved": "https://registry.npmjs.org/socket.io-session/-/socket.io-session-0.0.5.tgz"
}
